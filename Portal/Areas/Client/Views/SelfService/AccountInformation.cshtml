@model Portal.Business.ViewModels.AccountDetailViewModel

@{
    ViewData["Title"] = "Account Information";
}

<!---- Page Title & Date --->
<div class="row">
    <div class="element-wrapper col-md-12 pb-0">
        <h6 class="element-header">
            Account Information
            <span class="date-timestamp float-right">Jan 27th 2019, 7:42am</span>
        </h6>
    </div>
</div>

<div class="row">

    <!---- Personal Information --->
    <div class="col-sm-12 col-md-8">

        <div class="element-box">

            <h5 class="form-header">
                Personal Information
            </h5>


            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr></tr>
                    </thead>
                    <tbody>

                        <tr>
                            <td class="nowrap">
                                FULL NAME
                            </td>

                            <td>
                                @Model.FullName
                            </td>
                        </tr>
                        <tr>
                            <td class="nowrap">
                                MEMBERSHIP NUMBER
                            </td>

                            <td>
                                @Model.MembershipNumber
                            </td>
                        </tr>
                        <tr>
                            <td class="nowrap">
                                MOBILE NUMBER
                            </td>

                            <td>
                                @Model.MobileNumber
                            </td>
                        </tr>
                        <tr>
                            <td class="nowrap">
                                EMAIL ADDRESS
                            </td>

                            <td>
                                @Model.EmailAddress
                            </td>
                        </tr>
                        <tr>
                            <td class="nowrap">
                                ADDRESS
                            </td>

                            <td>
                                @Model.Address
                            </td>
                        </tr>
                        <tr>
                            <td class="nowrap">
                                STATE
                            </td>

                            <td>
                                @Model.State
                            </td>
                        </tr>
                        <tr>
                            <td class="nowrap">
                                COUNTRY
                            </td>

                            <td>
                                @Model.Country
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>


        </div>
    </div>

    <!---- Reset Password --->
    <div class="col-sm-12 col-md-4" ng-app='armApp' ng-controller='AppController'>

        <div class="element-box element-wrapper">
            <h5 class="element-header">
                Reset Password

            </h5>
            @using (Html.BeginForm("ResetPassword", "SelfService", FormMethod.Post, new { role = "form", @name = "form" }))
            {
                <div class="form-group">
                    <label for=""> Old Password</label>
                    @Html.PasswordFor(m => m.ResetPassword.OldPassword, new { @class = "form-control", @placeholder = "Enter Old Password *", @type = "password" })
                </div>

                <div class="form-group">
                    <label for="">New Password</label>
                    @Html.PasswordFor(m => m.ResetPassword.NewPassword, new { @class = "form-control", @placeholder = "Enter New Password *", @type = "password", @ng_model = "pw" })

                    <div class="help-block form-text text-muted form-control-feedback" ng-show="checkPstrength()">
                        Password must be a minimum of eight (8) characters and contain at least a number or special character
                    </div>

                    <p></p>

                    <div>
                        <i class="os-icon os-icon-shield">&nbsp;<span class="pwStrength">Password Strength</span></i><small class="smaller_text">: {[{pStrength}]}%</small>
                        <ul id="strength" check-strength="pw"></ul>
                    </div>
                </div>


                <div class="form-group">
                    <label for="">Confirm New Password</label>
                    @Html.PasswordFor(m => m.ResetPassword.ConfirmNewPassword, new { @class = "form-control", @placeholder = "Confirm New Password *", @type = "password" })
                </div>

                <div class="b-t mt-3 pt-3">
                    <button class="btn btn-primary" ng-disabled="checkPstrength()" type="submit"> Reset Password</button>
                </div>
            }

        </div>
    </div>

</div>

@section Scripts{
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.4.0-rc.0/angular.js"></script>
    <script>
        angular.module('armApp', ['armApp.passwordStrength']).config(function ($interpolateProvider) {
            $interpolateProvider.startSymbol('{[{').endSymbol('}]}');
        })
            .controller('AppController', function ($scope, $window, $http, $rootScope, $filter) {
                $scope.pw = '';
                $scope.checkPstrength = function () {
                    if ($scope.pStrength >= 40) {
                        return false;
                    }
                    return true;
                }
            })


        /* Directives */
        angular.module('armApp.passwordStrength', []).

            directive('checkStrength', function () {

                return {
                    replace: false,
                    restrict: 'EACM',
                    link: function (scope, iElement, iAttrs) {

                        var strength = {
                            colors: ['#F00', '#F90', '#FF0', '#9F0', '#0F0'],
                            mesureStrength: function (p) {

                                var _force = 0;
                                var _regex = /[$-/:-?{-~!"^_`\[\]]/g;

                                var _lowerLetters = /[a-z]+/.test(p);
                                var _upperLetters = /[A-Z]+/.test(p);
                                var _numbers = /[0-9]+/.test(p);
                                var _symbols = _regex.test(p);

                                var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];
                                var _passedMatches = $.grep(_flags, function (el) { return el === true; }).length;

                                _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);
                                _force += _passedMatches * 10;

                                // penality (short password)
                                _force = (p.length <= 6) ? Math.min(_force, 10) : _force;

                                // penality (poor variety of characters)
                                _force = (_passedMatches == 1) ? Math.min(_force, 10) : _force;
                                _force = (_passedMatches == 2) ? Math.min(_force, 20) : _force;
                                _force = (_passedMatches == 3) ? Math.min(_force, 40) : _force;

                                return _force;

                            },
                            getColor: function (s) {

                                var idx = 0;
                                if (s <= 20) { idx = 0; }
                                else if (s <= 30) { idx = 1; }
                                else if (s <= 40) { idx = 2; }
                                else if (s <= 50) { idx = 3; }
                                else { idx = 4; }

                                return { idx: idx + 1, col: this.colors[idx] };

                            }
                        };

                        scope.$watch(iAttrs.checkStrength, function () {
                            scope.pStrength = (scope.pw) ? strength.mesureStrength(scope.pw) : 0;

                            if (scope.pw === '') {
                                iElement.css({ "display": "none" });
                            } else {
                                var c = strength.getColor(strength.mesureStrength(scope.pw));
                                iElement.css({ "display": "inline" });
                                iElement.children('li')
                                    .css({ "background": "#DDD" })
                                    .slice(0, c.idx)
                                    .css({ "background": c.col });
                            }
                        });

                    },
                    template: '<li class="point"></li><li class="point"></li><li class="point"></li><li class="point"></li><li class="point"></li>'
                };

            });

        function scrollToTop() {
            $('body,html').animate({
                scrollTop: 0
            }, 800);
        }</script>
}