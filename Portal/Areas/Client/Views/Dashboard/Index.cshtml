@model Portal.Business.ViewModels.AccountStatementViewModel

@{
    ViewData["Title"] = "Index";
    Layout = "~/Areas/Client/Views/Shared/_Layout-Client.cshtml";
}

<!---- Investment Overview --->

<div class="row">
    <div class="col-md-12">

        <div class="element-box element-wrapper row">
            <!---- Investment Position --->
            <div class="col-sm-12 col-lg-8  col-md-7 col-xxl-8">
                <div class="element-balances justify-content-between mobile-full-width">
                    <div class="balance balance-v2">
                        <div class="balance-title">
                            Your Investment Position
                        </div>
                        <div class="balance-value">
                            <span>&#8358;@String.Format("{0:#,##0.##}", Model.TotalBalance)</span>
                        </div>
                    </div>

                </div>
                <div class="element-wrapper pb-4 mb-4 border-bottom">
                    <div class="element-box-tp">
                        <a class="btn btn-primary" asp-area="" asp-controller="MutualFunds" asp-action="Index"><i class="os-icon os-icon-plus-circle"></i><span>New Investment</span></a><a class="btn btn-grey" asp-area="Client" asp-controller="Portfolio" asp-action="MyInvestments"><i class="os-icon os-icon-agenda-1"></i><span>Manage Portfolio </span></a>
                        <a class="btn btn-primary" asp-area="Client" asp-controller="Portfolio" asp-action="AdditionalInvestment"><i class="os-icon os-icon-plus-circle"></i><span>Additional Investment</span></a>
                    </div>
                </div>
                <!---- Balance History --->
                <div class="element-wrapper compact">
                    <div class="element-box-tp">
                        <div class="element-actions d-none d-sm-block">
                            <form class="form-inline justify-content-sm-end">
                                <label class="smaller" for="">Show Period:</label>
                                <select class="form-control form-control-sm form-control-faded">
                                    <option selected="true">
                                        Last 30 days
                                    </option>
                                    <option>
                                        This Week
                                    </option>
                                    <option>
                                        This Month
                                    </option>
                                    <option>
                                        Today
                                    </option>
                                </select>
                            </form>
                        </div>
                        <h6 class="element-box-header">
                            Balance History
                        </h6>
                        <div class="el-chart-w mt-5">
                            <!---  <canvas data-chart-data="13,28,19,24,43,49,40,35,42,46,38,32,45" height="70" id="liteLineChartV3" width="300"></canvas> ---->
                            <canvas id="liteLineChartFPH"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            <!---- Investment Distribution  --->
            <div class="col-sm-12 col-lg-4 col-md-5 col-xxl-4">
                <div class="element-box less-padding">
                    <h5 class=" pb-2 b-b">
                        Investment Distribution
                    </h5>
                    <div class="el-chart-w">
                        <canvas height="120" id="donutChart1" width="120"></canvas>
                        <div class="inside-donut-chart-label">
                            <strong>&#8358;@String.Format("{0:#,##0.##}", @ViewBag.SumAccruedInterest)</strong><span>Accrued Interest</span>
                        </div>
                    </div>
                    <div class="el-legend condensed">
                        <div class="row">
                            <div class=" col-xxxxl-6 ml-sm-auto mr-sm-auto">
                                @if (Model.Summaries != null && Model.Summaries.Count > 0)
                                {
                                    var mmf = String.Empty;
                                    var ef = String.Empty;
                                    var df = String.Empty;
                                    var agf = String.Empty;

                                    foreach (var data in Model.Summaries)
                                    {
                                        var productcode = data.ProductCode;
                                        var balance = (Model.TotalBalance == 0) ? 0 : (((data.CurrentBalance) / (Model.TotalBalance)) * 100);

                                        <div class="legend-value-w">
                                            @if (data.ProductName.Equals("ARM Money Market Fund"))
                                            {
                                                mmf = (Math.Round(balance, 2)).ToString();
                                                <div class="legend-pin legend-pin-squared" style="background-color: #6896f9;"></div>
                                                <div class="legend-value">
                                                    <span>@data.ProductName</span>
                                                    <div class="legend-sub-value">
                                                        @Math.Round(balance, 2)%, &#8358;@String.Format("{0:#,##0.##}", data.AccruedInterest)
                                                    </div>
                                                </div>
                                            }
                                            else if (data.ProductName.Equals("ARM Ethical Fund"))
                                            {
                                                ef = (Math.Round(balance, 2)).ToString();
                                                <div class="legend-pin legend-pin-squared" style="background-color: #85c751;"></div>
                                                <div class="legend-value">
                                                    <span>@data.ProductName</span>
                                                    <div class="legend-sub-value">
                                                        @Math.Round(balance, 2)%, &#8358;@String.Format("{0:#,##0.##}", data.AccruedInterest)
                                                    </div>
                                                </div>
                                            }
                                            else if (data.ProductName.Equals("ARM Discovery Fund"))
                                            {
                                                df = (Math.Round(balance, 2)).ToString();
                                                <div class="legend-pin legend-pin-squared" style="background-color: #ffcc29;"></div>
                                                <div class="legend-value">
                                                    <span>@data.ProductName</span>
                                                    <div class="legend-sub-value">
                                                        @Math.Round(balance, 2)%, &#8358;@String.Format("{0:#,##0.##}", data.AccruedInterest)
                                                    </div>
                                                </div>
                                            }
                                            else if (data.ProductName.Equals("ARM Aggressive Growth Fund"))
                                            {
                                                agf = (Math.Round(balance, 2)).ToString();
                                                <div class="legend-pin legend-pin-squared" style="background-color: #f37070;"></div>
                                                <div class="legend-value">
                                                    <span>@data.ProductName</span>
                                                    <div class="legend-sub-value">
                                                        @Math.Round(balance, 2)%, &#8358;@String.Format("{0:#,##0.##}", data.AccruedInterest)
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }

                                    <input type="text" value="@mmf" id="mmf" hidden />
                                    <input type="text" value="@ef" id="ef" hidden />
                                    <input type="text" value="@df" id="df" hidden />
                                    <input type="text" value="@agf" id="agf" hidden />
                                }
                            </div>

                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>


<!---- Latest Transactions --->
<div class="row">
    <div class="col-md-12 ">
        <div class=" element-wrapper mt-5">
            <h5 class="element-header">
                Latest Transactions
                <a class="mr-2 mb-2 btn btn-primary float-right" asp-area="Client" asp-controller="Portfolio" asp-action="AccountStatement"> Transaction History</a>
            </h5>
            <div class="">
                <div class="table-responsive">
                    <table class="table table-padded">
                        <thead>
                            <tr>
                                <th>DATE</th>
                                <th>TYPE</th>
                                <th>FUND</th>
                                <th class="text-center">AMOUNT</th>
                                <th>UNIT</th>
                                <th class="text-center">UNIT PRICE</th>
                                <th class="text-center">MARKET VALUE</th>
                                <th>DESCRIPTION</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.Transactions != null && Model.Transactions.Count > 0)
                            {
                                @foreach (var data in Model.Transactions.AsEnumerable().Reverse())
                                {
                                    <tr>
                                        <td>@data.TransactionDate.ToString("dd MMM yyyy")</td>
                                        <td>@data.TransactionType</td>
                                        <td>@data.FundCode</td>

                                        @if (data.Amount >= 0)
                                        {
                                            <td class="text-center"><span class="text-success">+₦@String.Format("{0:#,##0.##}", data.Amount)</span></td>
                                        }
                                        else
                                        {
                                            <td class="text-center"><span class="text-danger">-₦@String.Format("{0:#,##0.##}", (data.Amount * -1))</span></td>
                                        }

                                        @if (data.Units >= 0)
                                        {
                                            <td class=""><span class="text-success">@String.Format("{0:#,##0.##}", data.Units)</span></td>
                                        }
                                        else
                                        {
                                            <td><span class="text-danger">@String.Format("{0:#,##0.##}", (data.Units * -1))</span></td>
                                        }

                                        <td class="text-center">@data.UnitPrice.ToString("F2")</td>

                                        @if (data.MarketValue >= 0)
                                        {
                                            <td class="text-center"><span class="text-success">+₦@String.Format("{0:#,##0.##}", data.MarketValue)</span></td>
                                        }
                                        else
                                        {
                                            <td class="text-center"><span class="text-danger">-₦@String.Format("{0:#,##0.##}", (data.MarketValue * -1))</span></td>
                                        }

                                        <td>@data.Description</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <h4> No record available for this month </h4>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!---- Fund Performance --->
<div class=" element-wrapper">
    <h5 class="element-header">
        Fund Performance
    </h5>
    <div class="row">
        <div class="col-md-12 ">
            <div class="element-box element-wrapper">
                <div class="content-box">
                    <div class="os-tabs-w">
                        <div class="os-tabs-controls os-tabs-complex ">
                            <ul class="nav nav-tabs ali-center">
                                <li class="nav-item">
                                    <a aria-expanded="true" class="nav-link active" data-toggle="tab" href="#tab_mmf"><span class="tab-label">Money Market Fund</span></a>
                                </li>
                                <li class="nav-item">
                                    <a aria-expanded="false" class="nav-link" data-toggle="tab" href="#tab_df"><span class="tab-label">Discovery Fund</span></a>
                                </li>
                                <li class="nav-item">
                                    <a aria-expanded="false" class="nav-link" data-toggle="tab" href="#tab_agf"><span class="tab-label">Aggressive Growth Fund</span></a>
                                </li>
                                <li class="nav-item">
                                    <a aria-expanded="false" class="nav-link" data-toggle="tab" href="#tab_ef"><span class="tab-label">Ethical Fund</span></a>
                                </li>

                            </ul>
                        </div>


                        <div class="tab-content" ng-app="chartApp" ng-controller="amChartsController" ng-init="init()">
                            <div class="tab-pane active" id="ARMMMF" style="height:500px;">

                            </div>

                            <div class="tab-pane" id="ARMDF" style="height:500px;">

                            </div>

                            <div class="tab-pane" id="AGF" style="height:500px;">

                            </div>

                            <div class="tab-pane" id="ARMEF" style="height:500px;">


                            </div>
                        </div>


                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts{
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.4.0-rc.0/angular.js"></script>
<script src="https://www.amcharts.com/lib/3/amcharts.js"></script>
<script src="https://www.amcharts.com/lib/3/serial.js"></script>
<script src="https://www.amcharts.com/lib/3/themes/light.js"></script>
<script src="~/custom-client/components/piechart/js/vendor/dependencies.js"></script>
<script src="~/custom-client/components/piechart/js/vendor/pizza.js"></script>
<script>
        $(window).load(function () {
            Pizza.init();
            $(document).foundation();
    });
</script>
<script>
        angular.module('chartApp', [])
            .controller('amChartsController', function ($scope, $http, $filter) {
                $scope.init = function () {
                    plotYield();
                    loadPrice('ARMDF');
                    loadPrice('AGF');
                    loadPrice('ARMEF');
                }

                function GraphData(data) {
                    this.data = data
                }

                function loadPrice(fund_code) {
                    var url = '@Url.Action("FundPriceHistory", "Dashboard")' + '?fundCode=' + fund_code;
                    $http.get(url)
                        .success(function (data, status, headers, config) {
                            var graphData = new GraphData(data.FundPrice.reverse());
                            var plotter = new FundPlotter(fund_code, graphData.data);
                            plotter.plot();
                        })
                        .error(function (data, status, header, config) {
                        });
                }

                function FundPlotter(divId, data) {
                    this.div = divId;
                    this.data = data;
                    this.plot = function () {
                        var chart = AmCharts.makeChart(this.div, {
                            "type": "serial",
                            "theme": "light",
                            "dataDateFormat": "YYYY-MM-DD",
                            "precision": 2,
                            "valueAxes": [{
                                "id": "v1",
                                "title": "Price",
                                "position": "left",
                                "gridAlpha": 0.2,
                                "dashLength": 0,
                                "autoGridCount": false,
                                "labelFunction": function (value) {
                                    return "₦" + Math.round(value);
                                }
                            }],
                            "graphs": [{
                                "id": "g1",
                                "valueAxis": "v1",
                                "lineThickness": 2,
                                "lineColor": "#20acd4",
                                "type": "line",
                                "title": "Bid Price",
                                "useLineColorForBulletBorder": true,
                                "valueField": "BidPrice",
                                "balloonText": "[[title]]<br /><b style='font-size: 130%'>₦[[value]]</b>"
                            }, {
                                "id": "g4",
                                "valueAxis": "v1",
                                "lineColor": "#62cf73",
                                "fillColors": "#62cf73",
                                "fillAlphas": 0.5,
                                "type": "column",
                                "title": "Offer Price",
                                "valueField": "OfferPrice",
                                "clustered": false,
                                "columnWidth": 0.5,
                                "legendValueText": "₦[[value]]",
                                "balloonText": "[[title]]<br /><b style='font-size: 130%'>₦[[value]]</b>"
                            }],
                            "chartScrollbar": {
                                "graph": "g1",
                                "oppositeAxis": false,
                                "offset": 30,
                                "scrollbarHeight": 50,
                                "backgroundAlpha": 0,
                                "selectedBackgroundAlpha": 0.1,
                                "selectedBackgroundColor": "#888888",
                                "graphFillAlpha": 0,
                                "graphLineAlpha": 0.5,
                                "selectedGraphFillAlpha": 0,
                                "selectedGraphLineAlpha": 1,
                                "autoGridCount": true,
                                "color": "#AAAAAA"
                            },
                            "chartCursor": {
                                "pan": true,
                                "valueLineEnabled": true,
                                "valueLineBalloonEnabled": true,
                                "cursorAlpha": 0,
                                "valueLineAlpha": 0.2
                            },
                            "categoryField": 'PriceDate',
                            "categoryAxis": {
                                "dashLength": 1,
                                "minorGridEnabled": true,
                                "categoryFunction": function (val, data, axis) {
                                    return $filter('date')(val, 'dd MMM yy');
                                }
                            },
                            "legend": {
                                "useGraphSettings": true,
                                "position": "top"
                            },
                            "balloon": {
                                "borderThickness": 1,
                                "shadowAlpha": 0
                            },
                            "dataProvider": this.data
                        });
                    }

                }

                function plotYield() {
                    var url = '@Url.Action("FundYieldHistory", "Dashboard")';
                    $http.get(url)
                        .success(function (data, status, headers, config) {
                            //console.log(data.yields.reverse());
                            //var graphData = new GraphData(data.yields.reverse());

                            var res = data.Yields.reverse();                          
                            console.log(res);
                            //this.plot(graphData.data);
                            this.plot(res);
                        })
                        .error(function (data, status, header, config) {
                        });

                    this.plot = function (data) {
                        var chart = AmCharts.makeChart("ARMMMF", {
                            "type": "serial",
                            "theme": "light",
                            "dataProvider": data,
                            "valueAxes": [{
                                "gridColor": "#FFFFFF",
                                "gridAlpha": 0.2,
                                "dashLength": 0,
                                "id": "v1",
                                "title": "Yield",
                                "position": "left",
                                "autoGridCount": false,
                                "labelFunction": function (value) {
                                    return Math.round(value);
                                }
                            }],
                            "gridAboveGraphs": true,
                            "startDuration": 1,
                            "graphs": [{
                                "id": "y1",
                                "valueAxis": "v1",
                                "fillAlphas": 0.8,
                                "lineAlpha": 0.2,
                                "lineColor": "#62cf73",
                                "fillColors": "#62cf73",
                                "type": "column",
                                "title": "Effective Yield",
                                "valueField": "EffectiveYield",
                                "clustered": false,
                                "balloonText": "[[category]]: <b style='font-size: 130%'>[[value]]</b>"
                            }],
                            "chartScrollbar": {
                                "graph": "y1",
                                "oppositeAxis": false,
                                "offset": 30,
                                "scrollbarHeight": 50,
                                "backgroundAlpha": 0,
                                "selectedBackgroundAlpha": 0.1,
                                "selectedBackgroundColor": "#888888",
                                "graphFillAlpha": 0,
                                "graphLineAlpha": 0.3,
                                "selectedGraphFillAlpha": 0,
                                "selectedGraphLineAlpha": 0.1,
                                "autoGridCount": true,
                                "color": "#AAAAAA"
                            },
                            "chartCursor": {
                                "pan": true,
                                "valueLineEnabled": true,
                                "valueLineBalloonEnabled": true,
                                "cursorAlpha": 0,
                                "valueLineAlpha": 0.2
                            },
                            "categoryField": "PriceDate",
                            "categoryAxis": {
                                "gridPosition": "start",
                                "gridAlpha": 0,
                                "tickPosition": "start",
                                "tickLength": 20,
                                "categoryFunction": function (val, data, axis) {
                                    return $filter('date')(val, 'dd MMM yy');
                                }
                            },
                            "legend": {
                                "useGraphSettings": true,
                                "position": "top"
                            },
                            "balloon": {
                                "borderThickness": 1,
                                "shadowAlpha": 0
                            }

                        });
                    }
                }

            });
</script>
}